# ======== Program ========
from pyflink.table import *
from pyflink.table.expressions import *
from pyflink.table.udf import udf
from pyflink.table.types import DataTypes

from pyflink.table.udf import AggregateFunction, udaf
from pyflink.table import DataTypes
import pandas as pd

class MyObject:
    def __init__(self, name, value):
        self.name = name
        self.value = value

# UDF that returns the custom object
@udf(result_type=DataTypes.ROW([
    DataTypes.FIELD("name", DataTypes.STRING()),
    DataTypes.FIELD("value", DataTypes.INT())
]))
def preloaded_udf_complex(*input_val):
    obj = MyObject("test", hash(input_val[0]))
    return (obj.name, obj.value)  # Return as tuple

@udf(result_type=DataTypes.BOOLEAN())
def preloaded_udf_boolean(input_val):
    return True


def preloaded_aggregation(values: pd.Series) -> float:
    return values.skew()


try:
    table_env.drop_temporary_function("preloaded_udf_agg")
except:
    pass

preloaded_udf_agg = udaf(preloaded_aggregation, result_type=DataTypes.BIGINT(), func_type="pandas")

table_env.create_temporary_function("preloaded_udf_agg", preloaded_udf_agg)

autonode_13 = table_env.from_path("catalog_sales").select(*[col(column_name).alias(f"{column_name}_node_13") for column_name in table_env.from_path("catalog_sales").get_schema().get_field_names()])
autonode_12 = table_env.from_path("time_dim").select(*[col(column_name).alias(f"{column_name}_node_12") for column_name in table_env.from_path("time_dim").get_schema().get_field_names()])
autonode_11 = table_env.from_path("promotion").select(*[col(column_name).alias(f"{column_name}_node_11") for column_name in table_env.from_path("promotion").get_schema().get_field_names()])
autonode_14 = table_env.from_path("web_returns").select(*[col(column_name).alias(f"{column_name}_node_14") for column_name in table_env.from_path("web_returns").get_schema().get_field_names()])
autonode_15 = table_env.from_path("store").select(*[col(column_name).alias(f"{column_name}_node_15") for column_name in table_env.from_path("store").get_schema().get_field_names()])
autonode_9 = autonode_12.join(autonode_13, col('cs_sold_time_sk_node_13') == col('t_time_node_12'))
autonode_8 = autonode_11.add_columns(lit("hello"))
autonode_10 = autonode_14.join(autonode_15, col('s_number_employees_node_15') == col('wr_order_number_node_14'))
autonode_6 = autonode_8.join(autonode_9, col('t_sub_shift_node_12') == col('p_channel_demo_node_11'))
autonode_7 = autonode_10.alias('kEIOm')
autonode_4 = autonode_6.add_columns(lit("hello"))
autonode_5 = autonode_7.filter(col('s_division_name_node_15').char_length <= 5)
autonode_2 = autonode_4.order_by(col('cs_ship_hdemo_sk_node_13'))
autonode_3 = autonode_5.alias('AwEqh')
autonode_1 = autonode_2.join(autonode_3, col('p_start_date_sk_node_11') == col('wr_refunded_hdemo_sk_node_14'))
sink = autonode_1.group_by(col('p_discount_active_node_11')).select(col('p_response_target_node_11').sum.alias('p_response_target_node_11'))
print(sink.explain())

# ======== Details ========
"""
{
  "is_same": false,
  "result_name": "MismatchException",
  "result_details": {
    "opt": {
      "success": true,
      "error_name": "",
      "error_message": "",
      "stdout": "== Abstract Syntax Tree ==
LogicalProject(p_response_target_node_11=[$1])
+- LogicalAggregate(group=[{18}], EXPR$0=[SUM($6)])
   +- LogicalJoin(condition=[=($2, $70)], joinType=[inner])
      :- LogicalSort(sort0=[$39], dir0=[ASC])
      :  +- LogicalProject(p_promo_sk_node_11=[$0], p_promo_id_node_11=[$1], p_start_date_sk_node_11=[$2], p_end_date_sk_node_11=[$3], p_item_sk_node_11=[$4], p_cost_node_11=[$5], p_response_target_node_11=[$6], p_promo_name_node_11=[$7], p_channel_dmail_node_11=[$8], p_channel_email_node_11=[$9], p_channel_catalog_node_11=[$10], p_channel_tv_node_11=[$11], p_channel_radio_node_11=[$12], p_channel_press_node_11=[$13], p_channel_event_node_11=[$14], p_channel_demo_node_11=[$15], p_channel_details_node_11=[$16], p_purpose_node_11=[$17], p_discount_active_node_11=[$18], _c19=[$19], t_time_sk_node_12=[$20], t_time_id_node_12=[$21], t_time_node_12=[$22], t_hour_node_12=[$23], t_minute_node_12=[$24], t_second_node_12=[$25], t_am_pm_node_12=[$26], t_shift_node_12=[$27], t_sub_shift_node_12=[$28], t_meal_time_node_12=[$29], cs_sold_date_sk_node_13=[$30], cs_sold_time_sk_node_13=[$31], cs_ship_date_sk_node_13=[$32], cs_bill_customer_sk_node_13=[$33], cs_bill_cdemo_sk_node_13=[$34], cs_bill_hdemo_sk_node_13=[$35], cs_bill_addr_sk_node_13=[$36], cs_ship_customer_sk_node_13=[$37], cs_ship_cdemo_sk_node_13=[$38], cs_ship_hdemo_sk_node_13=[$39], cs_ship_addr_sk_node_13=[$40], cs_call_center_sk_node_13=[$41], cs_catalog_page_sk_node_13=[$42], cs_ship_mode_sk_node_13=[$43], cs_warehouse_sk_node_13=[$44], cs_item_sk_node_13=[$45], cs_promo_sk_node_13=[$46], cs_order_number_node_13=[$47], cs_quantity_node_13=[$48], cs_wholesale_cost_node_13=[$49], cs_list_price_node_13=[$50], cs_sales_price_node_13=[$51], cs_ext_discount_amt_node_13=[$52], cs_ext_sales_price_node_13=[$53], cs_ext_wholesale_cost_node_13=[$54], cs_ext_list_price_node_13=[$55], cs_ext_tax_node_13=[$56], cs_coupon_amt_node_13=[$57], cs_ext_ship_cost_node_13=[$58], cs_net_paid_node_13=[$59], cs_net_paid_inc_tax_node_13=[$60], cs_net_paid_inc_ship_node_13=[$61], cs_net_paid_inc_ship_tax_node_13=[$62], cs_net_profit_node_13=[$63], _c64=[_UTF-16LE'hello'])
      :     +- LogicalJoin(condition=[=($28, $15)], joinType=[inner])
      :        :- LogicalProject(p_promo_sk_node_11=[$0], p_promo_id_node_11=[$1], p_start_date_sk_node_11=[$2], p_end_date_sk_node_11=[$3], p_item_sk_node_11=[$4], p_cost_node_11=[$5], p_response_target_node_11=[$6], p_promo_name_node_11=[$7], p_channel_dmail_node_11=[$8], p_channel_email_node_11=[$9], p_channel_catalog_node_11=[$10], p_channel_tv_node_11=[$11], p_channel_radio_node_11=[$12], p_channel_press_node_11=[$13], p_channel_event_node_11=[$14], p_channel_demo_node_11=[$15], p_channel_details_node_11=[$16], p_purpose_node_11=[$17], p_discount_active_node_11=[$18], _c19=[_UTF-16LE'hello'])
      :        :  +- LogicalTableScan(table=[[default_catalog, default_database, promotion]])
      :        +- LogicalJoin(condition=[=($11, $2)], joinType=[inner])
      :           :- LogicalProject(t_time_sk_node_12=[$0], t_time_id_node_12=[$1], t_time_node_12=[$2], t_hour_node_12=[$3], t_minute_node_12=[$4], t_second_node_12=[$5], t_am_pm_node_12=[$6], t_shift_node_12=[$7], t_sub_shift_node_12=[$8], t_meal_time_node_12=[$9])
      :           :  +- LogicalTableScan(table=[[default_catalog, default_database, time_dim]])
      :           +- LogicalProject(cs_sold_date_sk_node_13=[$0], cs_sold_time_sk_node_13=[$1], cs_ship_date_sk_node_13=[$2], cs_bill_customer_sk_node_13=[$3], cs_bill_cdemo_sk_node_13=[$4], cs_bill_hdemo_sk_node_13=[$5], cs_bill_addr_sk_node_13=[$6], cs_ship_customer_sk_node_13=[$7], cs_ship_cdemo_sk_node_13=[$8], cs_ship_hdemo_sk_node_13=[$9], cs_ship_addr_sk_node_13=[$10], cs_call_center_sk_node_13=[$11], cs_catalog_page_sk_node_13=[$12], cs_ship_mode_sk_node_13=[$13], cs_warehouse_sk_node_13=[$14], cs_item_sk_node_13=[$15], cs_promo_sk_node_13=[$16], cs_order_number_node_13=[$17], cs_quantity_node_13=[$18], cs_wholesale_cost_node_13=[$19], cs_list_price_node_13=[$20], cs_sales_price_node_13=[$21], cs_ext_discount_amt_node_13=[$22], cs_ext_sales_price_node_13=[$23], cs_ext_wholesale_cost_node_13=[$24], cs_ext_list_price_node_13=[$25], cs_ext_tax_node_13=[$26], cs_coupon_amt_node_13=[$27], cs_ext_ship_cost_node_13=[$28], cs_net_paid_node_13=[$29], cs_net_paid_inc_tax_node_13=[$30], cs_net_paid_inc_ship_node_13=[$31], cs_net_paid_inc_ship_tax_node_13=[$32], cs_net_profit_node_13=[$33])
      :              +- LogicalTableScan(table=[[default_catalog, default_database, catalog_sales]])
      +- LogicalProject(AwEqh=[AS($0, _UTF-16LE'AwEqh')], wr_returned_time_sk_node_14=[$1], wr_item_sk_node_14=[$2], wr_refunded_customer_sk_node_14=[$3], wr_refunded_cdemo_sk_node_14=[$4], wr_refunded_hdemo_sk_node_14=[$5], wr_refunded_addr_sk_node_14=[$6], wr_returning_customer_sk_node_14=[$7], wr_returning_cdemo_sk_node_14=[$8], wr_returning_hdemo_sk_node_14=[$9], wr_returning_addr_sk_node_14=[$10], wr_web_page_sk_node_14=[$11], wr_reason_sk_node_14=[$12], wr_order_number_node_14=[$13], wr_return_quantity_node_14=[$14], wr_return_amt_node_14=[$15], wr_return_tax_node_14=[$16], wr_return_amt_inc_tax_node_14=[$17], wr_fee_node_14=[$18], wr_return_ship_cost_node_14=[$19], wr_refunded_cash_node_14=[$20], wr_reversed_charge_node_14=[$21], wr_account_credit_node_14=[$22], wr_net_loss_node_14=[$23], s_store_sk_node_15=[$24], s_store_id_node_15=[$25], s_rec_start_date_node_15=[$26], s_rec_end_date_node_15=[$27], s_closed_date_sk_node_15=[$28], s_store_name_node_15=[$29], s_number_employees_node_15=[$30], s_floor_space_node_15=[$31], s_hours_node_15=[$32], s_manager_node_15=[$33], s_market_id_node_15=[$34], s_geography_class_node_15=[$35], s_market_desc_node_15=[$36], s_market_manager_node_15=[$37], s_division_id_node_15=[$38], s_division_name_node_15=[$39], s_company_id_node_15=[$40], s_company_name_node_15=[$41], s_street_number_node_15=[$42], s_street_name_node_15=[$43], s_street_type_node_15=[$44], s_suite_number_node_15=[$45], s_city_node_15=[$46], s_county_node_15=[$47], s_state_node_15=[$48], s_zip_node_15=[$49], s_country_node_15=[$50], s_gmt_offset_node_15=[$51], s_tax_precentage_node_15=[$52])
         +- LogicalFilter(condition=[<=(CHAR_LENGTH($39), 5)])
            +- LogicalProject(kEIOm=[AS($0, _UTF-16LE'kEIOm')], wr_returned_time_sk_node_14=[$1], wr_item_sk_node_14=[$2], wr_refunded_customer_sk_node_14=[$3], wr_refunded_cdemo_sk_node_14=[$4], wr_refunded_hdemo_sk_node_14=[$5], wr_refunded_addr_sk_node_14=[$6], wr_returning_customer_sk_node_14=[$7], wr_returning_cdemo_sk_node_14=[$8], wr_returning_hdemo_sk_node_14=[$9], wr_returning_addr_sk_node_14=[$10], wr_web_page_sk_node_14=[$11], wr_reason_sk_node_14=[$12], wr_order_number_node_14=[$13], wr_return_quantity_node_14=[$14], wr_return_amt_node_14=[$15], wr_return_tax_node_14=[$16], wr_return_amt_inc_tax_node_14=[$17], wr_fee_node_14=[$18], wr_return_ship_cost_node_14=[$19], wr_refunded_cash_node_14=[$20], wr_reversed_charge_node_14=[$21], wr_account_credit_node_14=[$22], wr_net_loss_node_14=[$23], s_store_sk_node_15=[$24], s_store_id_node_15=[$25], s_rec_start_date_node_15=[$26], s_rec_end_date_node_15=[$27], s_closed_date_sk_node_15=[$28], s_store_name_node_15=[$29], s_number_employees_node_15=[$30], s_floor_space_node_15=[$31], s_hours_node_15=[$32], s_manager_node_15=[$33], s_market_id_node_15=[$34], s_geography_class_node_15=[$35], s_market_desc_node_15=[$36], s_market_manager_node_15=[$37], s_division_id_node_15=[$38], s_division_name_node_15=[$39], s_company_id_node_15=[$40], s_company_name_node_15=[$41], s_street_number_node_15=[$42], s_street_name_node_15=[$43], s_street_type_node_15=[$44], s_suite_number_node_15=[$45], s_city_node_15=[$46], s_county_node_15=[$47], s_state_node_15=[$48], s_zip_node_15=[$49], s_country_node_15=[$50], s_gmt_offset_node_15=[$51], s_tax_precentage_node_15=[$52])
               +- LogicalJoin(condition=[=($30, $13)], joinType=[inner])
                  :- LogicalProject(wr_returned_date_sk_node_14=[$0], wr_returned_time_sk_node_14=[$1], wr_item_sk_node_14=[$2], wr_refunded_customer_sk_node_14=[$3], wr_refunded_cdemo_sk_node_14=[$4], wr_refunded_hdemo_sk_node_14=[$5], wr_refunded_addr_sk_node_14=[$6], wr_returning_customer_sk_node_14=[$7], wr_returning_cdemo_sk_node_14=[$8], wr_returning_hdemo_sk_node_14=[$9], wr_returning_addr_sk_node_14=[$10], wr_web_page_sk_node_14=[$11], wr_reason_sk_node_14=[$12], wr_order_number_node_14=[$13], wr_return_quantity_node_14=[$14], wr_return_amt_node_14=[$15], wr_return_tax_node_14=[$16], wr_return_amt_inc_tax_node_14=[$17], wr_fee_node_14=[$18], wr_return_ship_cost_node_14=[$19], wr_refunded_cash_node_14=[$20], wr_reversed_charge_node_14=[$21], wr_account_credit_node_14=[$22], wr_net_loss_node_14=[$23])
                  :  +- LogicalTableScan(table=[[default_catalog, default_database, web_returns]])
                  +- LogicalProject(s_store_sk_node_15=[$0], s_store_id_node_15=[$1], s_rec_start_date_node_15=[$2], s_rec_end_date_node_15=[$3], s_closed_date_sk_node_15=[$4], s_store_name_node_15=[$5], s_number_employees_node_15=[$6], s_floor_space_node_15=[$7], s_hours_node_15=[$8], s_manager_node_15=[$9], s_market_id_node_15=[$10], s_geography_class_node_15=[$11], s_market_desc_node_15=[$12], s_market_manager_node_15=[$13], s_division_id_node_15=[$14], s_division_name_node_15=[$15], s_company_id_node_15=[$16], s_company_name_node_15=[$17], s_street_number_node_15=[$18], s_street_name_node_15=[$19], s_street_type_node_15=[$20], s_suite_number_node_15=[$21], s_city_node_15=[$22], s_county_node_15=[$23], s_state_node_15=[$24], s_zip_node_15=[$25], s_country_node_15=[$26], s_gmt_offset_node_15=[$27], s_tax_precentage_node_15=[$28])
                     +- LogicalTableScan(table=[[default_catalog, default_database, store]])

== Optimized Physical Plan ==
Calc(select=[EXPR$0 AS p_response_target_node_11])
+- HashAggregate(isMerge=[true], groupBy=[p_discount_active_node_11], select=[p_discount_active_node_11, Final_SUM(sum$0) AS EXPR$0])
   +- Exchange(distribution=[hash[p_discount_active_node_11]])
      +- LocalHashAggregate(groupBy=[p_discount_active_node_11], select=[p_discount_active_node_11, Partial_SUM(p_response_target_node_11) AS sum$0])
         +- NestedLoopJoin(joinType=[InnerJoin], where=[=(p_start_date_sk_node_11, wr_refunded_hdemo_sk_node_14)], select=[p_promo_sk_node_11, p_promo_id_node_11, p_start_date_sk_node_11, p_end_date_sk_node_11, p_item_sk_node_11, p_cost_node_11, p_response_target_node_11, p_promo_name_node_11, p_channel_dmail_node_11, p_channel_email_node_11, p_channel_catalog_node_11, p_channel_tv_node_11, p_channel_radio_node_11, p_channel_press_node_11, p_channel_event_node_11, p_channel_demo_node_11, p_channel_details_node_11, p_purpose_node_11, p_discount_active_node_11, _c19, t_time_sk_node_12, t_time_id_node_12, t_time_node_12, t_hour_node_12, t_minute_node_12, t_second_node_12, t_am_pm_node_12, t_shift_node_12, t_sub_shift_node_12, t_meal_time_node_12, cs_sold_date_sk_node_13, cs_sold_time_sk_node_13, cs_ship_date_sk_node_13, cs_bill_customer_sk_node_13, cs_bill_cdemo_sk_node_13, cs_bill_hdemo_sk_node_13, cs_bill_addr_sk_node_13, cs_ship_customer_sk_node_13, cs_ship_cdemo_sk_node_13, cs_ship_hdemo_sk_node_13, cs_ship_addr_sk_node_13, cs_call_center_sk_node_13, cs_catalog_page_sk_node_13, cs_ship_mode_sk_node_13, cs_warehouse_sk_node_13, cs_item_sk_node_13, cs_promo_sk_node_13, cs_order_number_node_13, cs_quantity_node_13, cs_wholesale_cost_node_13, cs_list_price_node_13, cs_sales_price_node_13, cs_ext_discount_amt_node_13, cs_ext_sales_price_node_13, cs_ext_wholesale_cost_node_13, cs_ext_list_price_node_13, cs_ext_tax_node_13, cs_coupon_amt_node_13, cs_ext_ship_cost_node_13, cs_net_paid_node_13, cs_net_paid_inc_tax_node_13, cs_net_paid_inc_ship_node_13, cs_net_paid_inc_ship_tax_node_13, cs_net_profit_node_13, _c64, AwEqh, wr_returned_time_sk_node_14, wr_item_sk_node_14, wr_refunded_customer_sk_node_14, wr_refunded_cdemo_sk_node_14, wr_refunded_hdemo_sk_node_14, wr_refunded_addr_sk_node_14, wr_returning_customer_sk_node_14, wr_returning_cdemo_sk_node_14, wr_returning_hdemo_sk_node_14, wr_returning_addr_sk_node_14, wr_web_page_sk_node_14, wr_reason_sk_node_14, wr_order_number_node_14, wr_return_quantity_node_14, wr_return_amt_node_14, wr_return_tax_node_14, wr_return_amt_inc_tax_node_14, wr_fee_node_14, wr_return_ship_cost_node_14, wr_refunded_cash_node_14, wr_reversed_charge_node_14, wr_account_credit_node_14, wr_net_loss_node_14, s_store_sk_node_15, s_store_id_node_15, s_rec_start_date_node_15, s_rec_end_date_node_15, s_closed_date_sk_node_15, s_store_name_node_15, s_number_employees_node_15, s_floor_space_node_15, s_hours_node_15, s_manager_node_15, s_market_id_node_15, s_geography_class_node_15, s_market_desc_node_15, s_market_manager_node_15, s_division_id_node_15, s_division_name_node_15, s_company_id_node_15, s_company_name_node_15, s_street_number_node_15, s_street_name_node_15, s_street_type_node_15, s_suite_number_node_15, s_city_node_15, s_county_node_15, s_state_node_15, s_zip_node_15, s_country_node_15, s_gmt_offset_node_15, s_tax_precentage_node_15], build=[right])
            :- Sort(orderBy=[cs_ship_hdemo_sk_node_13 ASC])
            :  +- Calc(select=[p_promo_sk AS p_promo_sk_node_11, p_promo_id AS p_promo_id_node_11, p_start_date_sk AS p_start_date_sk_node_11, p_end_date_sk AS p_end_date_sk_node_11, p_item_sk AS p_item_sk_node_11, p_cost AS p_cost_node_11, p_response_target AS p_response_target_node_11, p_promo_name AS p_promo_name_node_11, p_channel_dmail AS p_channel_dmail_node_11, p_channel_email AS p_channel_email_node_11, p_channel_catalog AS p_channel_catalog_node_11, p_channel_tv AS p_channel_tv_node_11, p_channel_radio AS p_channel_radio_node_11, p_channel_press AS p_channel_press_node_11, p_channel_event AS p_channel_event_node_11, p_channel_demo AS p_channel_demo_node_11, p_channel_details AS p_channel_details_node_11, p_purpose AS p_purpose_node_11, p_discount_active AS p_discount_active_node_11, 'hello' AS _c19, t_time_sk AS t_time_sk_node_12, t_time_id AS t_time_id_node_12, t_time AS t_time_node_12, t_hour AS t_hour_node_12, t_minute AS t_minute_node_12, t_second AS t_second_node_12, t_am_pm AS t_am_pm_node_12, t_shift AS t_shift_node_12, t_sub_shift AS t_sub_shift_node_12, t_meal_time AS t_meal_time_node_12, cs_sold_date_sk AS cs_sold_date_sk_node_13, cs_sold_time_sk AS cs_sold_time_sk_node_13, cs_ship_date_sk AS cs_ship_date_sk_node_13, cs_bill_customer_sk AS cs_bill_customer_sk_node_13, cs_bill_cdemo_sk AS cs_bill_cdemo_sk_node_13, cs_bill_hdemo_sk AS cs_bill_hdemo_sk_node_13, cs_bill_addr_sk AS cs_bill_addr_sk_node_13, cs_ship_customer_sk AS cs_ship_customer_sk_node_13, cs_ship_cdemo_sk AS cs_ship_cdemo_sk_node_13, cs_ship_hdemo_sk AS cs_ship_hdemo_sk_node_13, cs_ship_addr_sk AS cs_ship_addr_sk_node_13, cs_call_center_sk AS cs_call_center_sk_node_13, cs_catalog_page_sk AS cs_catalog_page_sk_node_13, cs_ship_mode_sk AS cs_ship_mode_sk_node_13, cs_warehouse_sk AS cs_warehouse_sk_node_13, cs_item_sk AS cs_item_sk_node_13, cs_promo_sk AS cs_promo_sk_node_13, cs_order_number AS cs_order_number_node_13, cs_quantity AS cs_quantity_node_13, cs_wholesale_cost AS cs_wholesale_cost_node_13, cs_list_price AS cs_list_price_node_13, cs_sales_price AS cs_sales_price_node_13, cs_ext_discount_amt AS cs_ext_discount_amt_node_13, cs_ext_sales_price AS cs_ext_sales_price_node_13, cs_ext_wholesale_cost AS cs_ext_wholesale_cost_node_13, cs_ext_list_price AS cs_ext_list_price_node_13, cs_ext_tax AS cs_ext_tax_node_13, cs_coupon_amt AS cs_coupon_amt_node_13, cs_ext_ship_cost AS cs_ext_ship_cost_node_13, cs_net_paid AS cs_net_paid_node_13, cs_net_paid_inc_tax AS cs_net_paid_inc_tax_node_13, cs_net_paid_inc_ship AS cs_net_paid_inc_ship_node_13, cs_net_paid_inc_ship_tax AS cs_net_paid_inc_ship_tax_node_13, cs_net_profit AS cs_net_profit_node_13, 'hello' AS _c64])
            :     +- Exchange(distribution=[single])
            :        +- HashJoin(joinType=[InnerJoin], where=[=(t_sub_shift, p_channel_demo)], select=[p_promo_sk, p_promo_id, p_start_date_sk, p_end_date_sk, p_item_sk, p_cost, p_response_target, p_promo_name, p_channel_dmail, p_channel_email, p_channel_catalog, p_channel_tv, p_channel_radio, p_channel_press, p_channel_event, p_channel_demo, p_channel_details, p_purpose, p_discount_active, t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time, cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit], isBroadcast=[true], build=[left])
            :           :- Exchange(distribution=[broadcast])
            :           :  +- TableSourceScan(table=[[default_catalog, default_database, promotion]], fields=[p_promo_sk, p_promo_id, p_start_date_sk, p_end_date_sk, p_item_sk, p_cost, p_response_target, p_promo_name, p_channel_dmail, p_channel_email, p_channel_catalog, p_channel_tv, p_channel_radio, p_channel_press, p_channel_event, p_channel_demo, p_channel_details, p_purpose, p_discount_active])
            :           +- HashJoin(joinType=[InnerJoin], where=[=(cs_sold_time_sk, t_time)], select=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time, cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit], build=[left])
            :              :- Exchange(distribution=[hash[t_time]])
            :              :  +- TableSourceScan(table=[[default_catalog, default_database, time_dim]], fields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time])
            :              +- Exchange(distribution=[hash[cs_sold_time_sk]])
            :                 +- TableSourceScan(table=[[default_catalog, default_database, catalog_sales]], fields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit])
            +- Exchange(distribution=[broadcast])
               +- Calc(select=[wr_returned_date_sk AS AwEqh, wr_returned_time_sk AS wr_returned_time_sk_node_14, wr_item_sk AS wr_item_sk_node_14, wr_refunded_customer_sk AS wr_refunded_customer_sk_node_14, wr_refunded_cdemo_sk AS wr_refunded_cdemo_sk_node_14, wr_refunded_hdemo_sk AS wr_refunded_hdemo_sk_node_14, wr_refunded_addr_sk AS wr_refunded_addr_sk_node_14, wr_returning_customer_sk AS wr_returning_customer_sk_node_14, wr_returning_cdemo_sk AS wr_returning_cdemo_sk_node_14, wr_returning_hdemo_sk AS wr_returning_hdemo_sk_node_14, wr_returning_addr_sk AS wr_returning_addr_sk_node_14, wr_web_page_sk AS wr_web_page_sk_node_14, wr_reason_sk AS wr_reason_sk_node_14, wr_order_number AS wr_order_number_node_14, wr_return_quantity AS wr_return_quantity_node_14, wr_return_amt AS wr_return_amt_node_14, wr_return_tax AS wr_return_tax_node_14, wr_return_amt_inc_tax AS wr_return_amt_inc_tax_node_14, wr_fee AS wr_fee_node_14, wr_return_ship_cost AS wr_return_ship_cost_node_14, wr_refunded_cash AS wr_refunded_cash_node_14, wr_reversed_charge AS wr_reversed_charge_node_14, wr_account_credit AS wr_account_credit_node_14, wr_net_loss AS wr_net_loss_node_14, s_store_sk AS s_store_sk_node_15, s_store_id AS s_store_id_node_15, s_rec_start_date AS s_rec_start_date_node_15, s_rec_end_date AS s_rec_end_date_node_15, s_closed_date_sk AS s_closed_date_sk_node_15, s_store_name AS s_store_name_node_15, s_number_employees AS s_number_employees_node_15, s_floor_space AS s_floor_space_node_15, s_hours AS s_hours_node_15, s_manager AS s_manager_node_15, s_market_id AS s_market_id_node_15, s_geography_class AS s_geography_class_node_15, s_market_desc AS s_market_desc_node_15, s_market_manager AS s_market_manager_node_15, s_division_id AS s_division_id_node_15, s_division_name AS s_division_name_node_15, s_company_id AS s_company_id_node_15, s_company_name AS s_company_name_node_15, s_street_number AS s_street_number_node_15, s_street_name AS s_street_name_node_15, s_street_type AS s_street_type_node_15, s_suite_number AS s_suite_number_node_15, s_city AS s_city_node_15, s_county AS s_county_node_15, s_state AS s_state_node_15, s_zip AS s_zip_node_15, s_country AS s_country_node_15, s_gmt_offset AS s_gmt_offset_node_15, s_tax_precentage AS s_tax_precentage_node_15])
                  +- NestedLoopJoin(joinType=[InnerJoin], where=[=(s_number_employees, wr_order_number)], select=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss, s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage], build=[right])
                     :- TableSourceScan(table=[[default_catalog, default_database, web_returns]], fields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage], where=[<=(CHAR_LENGTH(s_division_name), 5)])
                           +- TableSourceScan(table=[[default_catalog, default_database, store, filter=[<=(CHAR_LENGTH(s_division_name), 5)]]], fields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage])

== Optimized Execution Plan ==
Calc(select=[EXPR$0 AS p_response_target_node_11])
+- HashAggregate(isMerge=[true], groupBy=[p_discount_active_node_11], select=[p_discount_active_node_11, Final_SUM(sum$0) AS EXPR$0])
   +- Exchange(distribution=[hash[p_discount_active_node_11]])
      +- LocalHashAggregate(groupBy=[p_discount_active_node_11], select=[p_discount_active_node_11, Partial_SUM(p_response_target_node_11) AS sum$0])
         +- NestedLoopJoin(joinType=[InnerJoin], where=[(p_start_date_sk_node_11 = wr_refunded_hdemo_sk_node_14)], select=[p_promo_sk_node_11, p_promo_id_node_11, p_start_date_sk_node_11, p_end_date_sk_node_11, p_item_sk_node_11, p_cost_node_11, p_response_target_node_11, p_promo_name_node_11, p_channel_dmail_node_11, p_channel_email_node_11, p_channel_catalog_node_11, p_channel_tv_node_11, p_channel_radio_node_11, p_channel_press_node_11, p_channel_event_node_11, p_channel_demo_node_11, p_channel_details_node_11, p_purpose_node_11, p_discount_active_node_11, _c19, t_time_sk_node_12, t_time_id_node_12, t_time_node_12, t_hour_node_12, t_minute_node_12, t_second_node_12, t_am_pm_node_12, t_shift_node_12, t_sub_shift_node_12, t_meal_time_node_12, cs_sold_date_sk_node_13, cs_sold_time_sk_node_13, cs_ship_date_sk_node_13, cs_bill_customer_sk_node_13, cs_bill_cdemo_sk_node_13, cs_bill_hdemo_sk_node_13, cs_bill_addr_sk_node_13, cs_ship_customer_sk_node_13, cs_ship_cdemo_sk_node_13, cs_ship_hdemo_sk_node_13, cs_ship_addr_sk_node_13, cs_call_center_sk_node_13, cs_catalog_page_sk_node_13, cs_ship_mode_sk_node_13, cs_warehouse_sk_node_13, cs_item_sk_node_13, cs_promo_sk_node_13, cs_order_number_node_13, cs_quantity_node_13, cs_wholesale_cost_node_13, cs_list_price_node_13, cs_sales_price_node_13, cs_ext_discount_amt_node_13, cs_ext_sales_price_node_13, cs_ext_wholesale_cost_node_13, cs_ext_list_price_node_13, cs_ext_tax_node_13, cs_coupon_amt_node_13, cs_ext_ship_cost_node_13, cs_net_paid_node_13, cs_net_paid_inc_tax_node_13, cs_net_paid_inc_ship_node_13, cs_net_paid_inc_ship_tax_node_13, cs_net_profit_node_13, _c64, AwEqh, wr_returned_time_sk_node_14, wr_item_sk_node_14, wr_refunded_customer_sk_node_14, wr_refunded_cdemo_sk_node_14, wr_refunded_hdemo_sk_node_14, wr_refunded_addr_sk_node_14, wr_returning_customer_sk_node_14, wr_returning_cdemo_sk_node_14, wr_returning_hdemo_sk_node_14, wr_returning_addr_sk_node_14, wr_web_page_sk_node_14, wr_reason_sk_node_14, wr_order_number_node_14, wr_return_quantity_node_14, wr_return_amt_node_14, wr_return_tax_node_14, wr_return_amt_inc_tax_node_14, wr_fee_node_14, wr_return_ship_cost_node_14, wr_refunded_cash_node_14, wr_reversed_charge_node_14, wr_account_credit_node_14, wr_net_loss_node_14, s_store_sk_node_15, s_store_id_node_15, s_rec_start_date_node_15, s_rec_end_date_node_15, s_closed_date_sk_node_15, s_store_name_node_15, s_number_employees_node_15, s_floor_space_node_15, s_hours_node_15, s_manager_node_15, s_market_id_node_15, s_geography_class_node_15, s_market_desc_node_15, s_market_manager_node_15, s_division_id_node_15, s_division_name_node_15, s_company_id_node_15, s_company_name_node_15, s_street_number_node_15, s_street_name_node_15, s_street_type_node_15, s_suite_number_node_15, s_city_node_15, s_county_node_15, s_state_node_15, s_zip_node_15, s_country_node_15, s_gmt_offset_node_15, s_tax_precentage_node_15], build=[right])
            :- Sort(orderBy=[cs_ship_hdemo_sk_node_13 ASC])
            :  +- Calc(select=[p_promo_sk AS p_promo_sk_node_11, p_promo_id AS p_promo_id_node_11, p_start_date_sk AS p_start_date_sk_node_11, p_end_date_sk AS p_end_date_sk_node_11, p_item_sk AS p_item_sk_node_11, p_cost AS p_cost_node_11, p_response_target AS p_response_target_node_11, p_promo_name AS p_promo_name_node_11, p_channel_dmail AS p_channel_dmail_node_11, p_channel_email AS p_channel_email_node_11, p_channel_catalog AS p_channel_catalog_node_11, p_channel_tv AS p_channel_tv_node_11, p_channel_radio AS p_channel_radio_node_11, p_channel_press AS p_channel_press_node_11, p_channel_event AS p_channel_event_node_11, p_channel_demo AS p_channel_demo_node_11, p_channel_details AS p_channel_details_node_11, p_purpose AS p_purpose_node_11, p_discount_active AS p_discount_active_node_11, 'hello' AS _c19, t_time_sk AS t_time_sk_node_12, t_time_id AS t_time_id_node_12, t_time AS t_time_node_12, t_hour AS t_hour_node_12, t_minute AS t_minute_node_12, t_second AS t_second_node_12, t_am_pm AS t_am_pm_node_12, t_shift AS t_shift_node_12, t_sub_shift AS t_sub_shift_node_12, t_meal_time AS t_meal_time_node_12, cs_sold_date_sk AS cs_sold_date_sk_node_13, cs_sold_time_sk AS cs_sold_time_sk_node_13, cs_ship_date_sk AS cs_ship_date_sk_node_13, cs_bill_customer_sk AS cs_bill_customer_sk_node_13, cs_bill_cdemo_sk AS cs_bill_cdemo_sk_node_13, cs_bill_hdemo_sk AS cs_bill_hdemo_sk_node_13, cs_bill_addr_sk AS cs_bill_addr_sk_node_13, cs_ship_customer_sk AS cs_ship_customer_sk_node_13, cs_ship_cdemo_sk AS cs_ship_cdemo_sk_node_13, cs_ship_hdemo_sk AS cs_ship_hdemo_sk_node_13, cs_ship_addr_sk AS cs_ship_addr_sk_node_13, cs_call_center_sk AS cs_call_center_sk_node_13, cs_catalog_page_sk AS cs_catalog_page_sk_node_13, cs_ship_mode_sk AS cs_ship_mode_sk_node_13, cs_warehouse_sk AS cs_warehouse_sk_node_13, cs_item_sk AS cs_item_sk_node_13, cs_promo_sk AS cs_promo_sk_node_13, cs_order_number AS cs_order_number_node_13, cs_quantity AS cs_quantity_node_13, cs_wholesale_cost AS cs_wholesale_cost_node_13, cs_list_price AS cs_list_price_node_13, cs_sales_price AS cs_sales_price_node_13, cs_ext_discount_amt AS cs_ext_discount_amt_node_13, cs_ext_sales_price AS cs_ext_sales_price_node_13, cs_ext_wholesale_cost AS cs_ext_wholesale_cost_node_13, cs_ext_list_price AS cs_ext_list_price_node_13, cs_ext_tax AS cs_ext_tax_node_13, cs_coupon_amt AS cs_coupon_amt_node_13, cs_ext_ship_cost AS cs_ext_ship_cost_node_13, cs_net_paid AS cs_net_paid_node_13, cs_net_paid_inc_tax AS cs_net_paid_inc_tax_node_13, cs_net_paid_inc_ship AS cs_net_paid_inc_ship_node_13, cs_net_paid_inc_ship_tax AS cs_net_paid_inc_ship_tax_node_13, cs_net_profit AS cs_net_profit_node_13, 'hello' AS _c64])
            :     +- Exchange(distribution=[single])
            :        +- MultipleInput(readOrder=[0,0,1], members=[\
HashJoin(joinType=[InnerJoin], where=[(t_sub_shift = p_channel_demo)], select=[p_promo_sk, p_promo_id, p_start_date_sk, p_end_date_sk, p_item_sk, p_cost, p_response_target, p_promo_name, p_channel_dmail, p_channel_email, p_channel_catalog, p_channel_tv, p_channel_radio, p_channel_press, p_channel_event, p_channel_demo, p_channel_details, p_purpose, p_discount_active, t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time, cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit], isBroadcast=[true], build=[left])\
:- [#1] Exchange(distribution=[broadcast])\
+- HashJoin(joinType=[InnerJoin], where=[(cs_sold_time_sk = t_time)], select=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time, cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit], build=[left])\
   :- [#2] Exchange(distribution=[hash[t_time]])\
   +- [#3] Exchange(distribution=[hash[cs_sold_time_sk]])\
])
            :           :- Exchange(distribution=[broadcast])
            :           :  +- TableSourceScan(table=[[default_catalog, default_database, promotion]], fields=[p_promo_sk, p_promo_id, p_start_date_sk, p_end_date_sk, p_item_sk, p_cost, p_response_target, p_promo_name, p_channel_dmail, p_channel_email, p_channel_catalog, p_channel_tv, p_channel_radio, p_channel_press, p_channel_event, p_channel_demo, p_channel_details, p_purpose, p_discount_active])
            :           :- Exchange(distribution=[hash[t_time]])
            :           :  +- TableSourceScan(table=[[default_catalog, default_database, time_dim]], fields=[t_time_sk, t_time_id, t_time, t_hour, t_minute, t_second, t_am_pm, t_shift, t_sub_shift, t_meal_time])
            :           +- Exchange(distribution=[hash[cs_sold_time_sk]])
            :              +- TableSourceScan(table=[[default_catalog, default_database, catalog_sales]], fields=[cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit])
            +- Exchange(distribution=[broadcast])
               +- Calc(select=[wr_returned_date_sk AS AwEqh, wr_returned_time_sk AS wr_returned_time_sk_node_14, wr_item_sk AS wr_item_sk_node_14, wr_refunded_customer_sk AS wr_refunded_customer_sk_node_14, wr_refunded_cdemo_sk AS wr_refunded_cdemo_sk_node_14, wr_refunded_hdemo_sk AS wr_refunded_hdemo_sk_node_14, wr_refunded_addr_sk AS wr_refunded_addr_sk_node_14, wr_returning_customer_sk AS wr_returning_customer_sk_node_14, wr_returning_cdemo_sk AS wr_returning_cdemo_sk_node_14, wr_returning_hdemo_sk AS wr_returning_hdemo_sk_node_14, wr_returning_addr_sk AS wr_returning_addr_sk_node_14, wr_web_page_sk AS wr_web_page_sk_node_14, wr_reason_sk AS wr_reason_sk_node_14, wr_order_number AS wr_order_number_node_14, wr_return_quantity AS wr_return_quantity_node_14, wr_return_amt AS wr_return_amt_node_14, wr_return_tax AS wr_return_tax_node_14, wr_return_amt_inc_tax AS wr_return_amt_inc_tax_node_14, wr_fee AS wr_fee_node_14, wr_return_ship_cost AS wr_return_ship_cost_node_14, wr_refunded_cash AS wr_refunded_cash_node_14, wr_reversed_charge AS wr_reversed_charge_node_14, wr_account_credit AS wr_account_credit_node_14, wr_net_loss AS wr_net_loss_node_14, s_store_sk AS s_store_sk_node_15, s_store_id AS s_store_id_node_15, s_rec_start_date AS s_rec_start_date_node_15, s_rec_end_date AS s_rec_end_date_node_15, s_closed_date_sk AS s_closed_date_sk_node_15, s_store_name AS s_store_name_node_15, s_number_employees AS s_number_employees_node_15, s_floor_space AS s_floor_space_node_15, s_hours AS s_hours_node_15, s_manager AS s_manager_node_15, s_market_id AS s_market_id_node_15, s_geography_class AS s_geography_class_node_15, s_market_desc AS s_market_desc_node_15, s_market_manager AS s_market_manager_node_15, s_division_id AS s_division_id_node_15, s_division_name AS s_division_name_node_15, s_company_id AS s_company_id_node_15, s_company_name AS s_company_name_node_15, s_street_number AS s_street_number_node_15, s_street_name AS s_street_name_node_15, s_street_type AS s_street_type_node_15, s_suite_number AS s_suite_number_node_15, s_city AS s_city_node_15, s_county AS s_county_node_15, s_state AS s_state_node_15, s_zip AS s_zip_node_15, s_country AS s_country_node_15, s_gmt_offset AS s_gmt_offset_node_15, s_tax_precentage AS s_tax_precentage_node_15])
                  +- MultipleInput(readOrder=[1,0], members=[\
NestedLoopJoin(joinType=[InnerJoin], where=[(s_number_employees = wr_order_number)], select=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss, s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage], build=[right])\
:- [#1] TableSourceScan(table=[[default_catalog, default_database, web_returns]], fields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss])\
+- [#2] Exchange(distribution=[broadcast])\
])
                     :- TableSourceScan(table=[[default_catalog, default_database, web_returns]], fields=[wr_returned_date_sk, wr_returned_time_sk, wr_item_sk, wr_refunded_customer_sk, wr_refunded_cdemo_sk, wr_refunded_hdemo_sk, wr_refunded_addr_sk, wr_returning_customer_sk, wr_returning_cdemo_sk, wr_returning_hdemo_sk, wr_returning_addr_sk, wr_web_page_sk, wr_reason_sk, wr_order_number, wr_return_quantity, wr_return_amt, wr_return_tax, wr_return_amt_inc_tax, wr_fee, wr_return_ship_cost, wr_refunded_cash, wr_reversed_charge, wr_account_credit, wr_net_loss])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage], where=[(CHAR_LENGTH(s_division_name) <= 5)])
                           +- TableSourceScan(table=[[default_catalog, default_database, store, filter=[<=(CHAR_LENGTH(s_division_name), 5)]]], fields=[s_store_sk, s_store_id, s_rec_start_date, s_rec_end_date, s_closed_date_sk, s_store_name, s_number_employees, s_floor_space, s_hours, s_manager, s_market_id, s_geography_class, s_market_desc, s_market_manager, s_division_id, s_division_name, s_company_id, s_company_name, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, s_country, s_gmt_offset, s_tax_precentage])

",
      "stderr": ""
    },
    "unopt": {
      "success": false,
      "error_name": "RuntimeException",
      "error_message": "An error occurred while calling o77458968.explain.
: java.lang.RuntimeException: Error while applying rule FlinkExpandConversionRule, args [rel#156081046:AbstractConverter.BATCH_PHYSICAL.hash[0, 1]true.[38](input=RelSubset#156081044,convention=BATCH_PHYSICAL,FlinkRelDistributionTraitDef=hash[0, 1]true,sort=[38]), rel#156081043:BatchPhysicalLocalHashAggregate.BATCH_PHYSICAL.any.[38](input=RelSubset#156081042,groupBy=p_start_date_sk, p_discount_active,select=p_start_date_sk, p_discount_active, Partial_SUM(p_response_target) AS sum$0)]
\tat org.apache.calcite.plan.volcano.VolcanoRuleCall.onMatch(VolcanoRuleCall.java:250)
\tat org.apache.calcite.plan.volcano.IterativeRuleDriver.drive(IterativeRuleDriver.java:59)
\tat org.apache.calcite.plan.volcano.VolcanoPlanner.findBestExp(VolcanoPlanner.java:523)
\tat org.apache.calcite.tools.Programs$RuleSetProgram.run(Programs.java:317)
\tat org.apache.flink.table.planner.plan.optimize.program.FlinkVolcanoProgram.optimize(FlinkVolcanoProgram.scala:62)
\tat org.apache.flink.table.planner.plan.optimize.program.FlinkChainedProgram.$anonfun$optimize$1(FlinkChainedProgram.scala:59)
\tat scala.collection.TraversableOnce$folder$1.apply(TraversableOnce.scala:196)
\tat scala.collection.TraversableOnce$folder$1.apply(TraversableOnce.scala:194)
\tat scala.collection.Iterator.foreach(Iterator.scala:943)
\tat scala.collection.Iterator.foreach$(Iterator.scala:943)
\tat scala.collection.AbstractIterator.foreach(Iterator.scala:1431)
\tat scala.collection.IterableLike.foreach(IterableLike.scala:74)
\tat scala.collection.IterableLike.foreach$(IterableLike.scala:73)
\tat scala.collection.AbstractIterable.foreach(Iterable.scala:56)
\tat scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:199)
\tat scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:192)
\tat scala.collection.AbstractTraversable.foldLeft(Traversable.scala:108)
\tat org.apache.flink.table.planner.plan.optimize.program.FlinkChainedProgram.optimize(FlinkChainedProgram.scala:55)
\tat org.apache.flink.table.planner.plan.optimize.BatchCommonSubGraphBasedOptimizer.optimizeTree(BatchCommonSubGraphBasedOptimizer.scala:93)
\tat org.apache.flink.table.planner.plan.optimize.BatchCommonSubGraphBasedOptimizer.optimizeBlock(BatchCommonSubGraphBasedOptimizer.scala:58)
\tat org.apache.flink.table.planner.plan.optimize.BatchCommonSubGraphBasedOptimizer.$anonfun$doOptimize$1(BatchCommonSubGraphBasedOptimizer.scala:45)
\tat org.apache.flink.table.planner.plan.optimize.BatchCommonSubGraphBasedOptimizer.$anonfun$doOptimize$1$adapted(BatchCommonSubGraphBasedOptimizer.scala:45)
\tat scala.collection.immutable.List.foreach(List.scala:431)
\tat org.apache.flink.table.planner.plan.optimize.BatchCommonSubGraphBasedOptimizer.doOptimize(BatchCommonSubGraphBasedOptimizer.scala:45)
\tat org.apache.flink.table.planner.plan.optimize.CommonSubGraphBasedOptimizer.optimize(CommonSubGraphBasedOptimizer.scala:87)
\tat org.apache.flink.table.planner.delegation.PlannerBase.optimize(PlannerBase.scala:390)
\tat org.apache.flink.table.planner.delegation.PlannerBase.getExplainGraphs(PlannerBase.scala:625)
\tat org.apache.flink.table.planner.delegation.BatchPlanner.explain(BatchPlanner.scala:149)
\tat org.apache.flink.table.planner.delegation.BatchPlanner.explain(BatchPlanner.scala:49)
\tat org.apache.flink.table.api.internal.TableEnvironmentImpl.explainInternal(TableEnvironmentImpl.java:753)
\tat org.apache.flink.table.api.internal.TableImpl.explain(TableImpl.java:482)
\tat jdk.internal.reflect.GeneratedMethodAccessor32.invoke(Unknown Source)
\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)
\tat org.apache.flink.api.python.shaded.py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)
\tat org.apache.flink.api.python.shaded.py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:374)
\tat org.apache.flink.api.python.shaded.py4j.Gateway.invoke(Gateway.java:282)
\tat org.apache.flink.api.python.shaded.py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)
\tat org.apache.flink.api.python.shaded.py4j.commands.CallCommand.execute(CallCommand.java:79)
\tat org.apache.flink.api.python.shaded.py4j.GatewayConnection.run(GatewayConnection.java:238)
\tat java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.RuntimeException: Error occurred while applying rule FlinkExpandConversionRule
\tat org.apache.calcite.plan.volcano.VolcanoRuleCall.transformTo(VolcanoRuleCall.java:157)
\tat org.apache.calcite.plan.RelOptRuleCall.transformTo(RelOptRuleCall.java:273)
\tat org.apache.calcite.plan.RelOptRuleCall.transformTo(RelOptRuleCall.java:288)
\tat org.apache.flink.table.planner.plan.rules.physical.FlinkExpandConversionRule.satisfyTraitsBySelf(FlinkExpandConversionRule.scala:72)
\tat org.apache.flink.table.planner.plan.rules.physical.FlinkExpandConversionRule.onMatch(FlinkExpandConversionRule.scala:52)
\tat org.apache.calcite.plan.volcano.VolcanoRuleCall.onMatch(VolcanoRuleCall.java:223)
\t... 40 more
Caused by: java.lang.ArrayIndexOutOfBoundsException
",
      "stdout": "",
      "stderr": ""
    }
  }
}
"""



//Optimizer Branch Coverage: 0